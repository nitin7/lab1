# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: 
Student ID: 
Email: 

# Partner 2 (if you're working in a team)
Name: 
Student ID: 
Email: 

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)

# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)

# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)

# Extra credit problems
#Extra credit problem: 1
We finished the extra credit by checking for the MD5 checksum every time that 
a client connects to the tracker. In this way, we were able to detect corruption.
Specifically, we compared the checksum received from the tracker with the 
checksum of the downloaded file. If these were not equal, then the next download
will start to occur from the next peer. We made this feature easy to switch on by 
simply uncommenting the definition MD5_CHECKING in the beginning of osppeer.c:
//#define MD5_CHECKING 

# Add any other information you'd like us to know below this line.
